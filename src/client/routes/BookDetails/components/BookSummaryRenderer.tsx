import React from 'react';
import { Box, Typography, Paper, Divider, List, ListItem, ListItemText, Chip } from '@mui/material';
import { BookSummaryResult } from '../../../../services/AiActions/book-actions/summarizeBoook/types';

interface BookSummaryRendererProps {
  result: BookSummaryResult;
}

/**
 * Renders the result of a book summary AI action
 */
export const BookSummaryRenderer: React.FC<BookSummaryRendererProps> = ({ result }) => {
  if (!result || !result.summary) {
    return (
      <Box sx={{ mt: 2 }}>
        <Typography variant="body1">No summary available.</Typography>
      </Box>
    );
  }

  // Split the summary into paragraphs for better readability
  const paragraphs = result.summary.split('\n\n');

  return (
    <Paper elevation={0} sx={{ p: { xs: 0, sm: 3 }, mt: 2, bgcolor: 'background.default' }}>
      <Typography variant="h6" component="h3" gutterBottom>
        Book Summary
      </Typography>
      <Divider sx={{ mb: 2 }} />
      
      {/* Main summary */}
      {paragraphs.map((paragraph, index) => (
        <Typography key={index} variant="body1" paragraph>
          {paragraph}
        </Typography>
      ))}
      
      {/* Key points */}
      {result.keyPoints && result.keyPoints.length > 0 && (
        <Box sx={{ mt: 3 }}>
          <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
            Key Points
          </Typography>
          <List dense>
            {result.keyPoints.map((point, index) => (
              <ListItem key={index}>
                <ListItemText primary={point} />
              </ListItem>
            ))}
          </List>
        </Box>
      )}
      
      {/* Themes */}
      {result.themes && result.themes.length > 0 && (
        <Box sx={{ mt: 3 }}>
          <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
            Themes
          </Typography>
          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
            {result.themes.map((theme, index) => (
              <Chip key={index} label={theme} size="small" color="primary" variant="outlined" />
            ))}
          </Box>
        </Box>
      )}
      
      {/* Target audience */}
      {result.audience && (
        <Box sx={{ mt: 3 }}>
          <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
            Target Audience
          </Typography>
          <Typography variant="body2">
            {result.audience}
          </Typography>
        </Box>
      )}
      
      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>
        <Typography variant="caption" color="text.secondary">
          Generated by AI
        </Typography>
      </Box>
    </Paper>
  );
};
